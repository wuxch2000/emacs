(provide 'dict-elisp)
(require 'dict-tree)
(defvar dict-elisp nil "Dictionary dict-elisp.")
(setq dict-elisp '(DICT "dict-elisp" nil t nil nil (TSTREE [nil [[[nil [nil [nil [nil [[nil [nil [nil [nil [nil (0) nil nil] nil 107] nil 111] nil 111] nil 104] [nil [nil [nil [nil [nil [nil [nil (0) nil nil] nil 116] nil 115] nil 105] nil 108] nil 45] nil 111] nil 116] nil 45] nil 100] nil 100] nil 97] [nil [nil [nil [nil (0) nil nil] [nil [nil [nil [nil [nil (0) nil nil] nil 108] nil 111] nil 114] nil 116] 100] nil 110] nil 111] nil 99] [nil [nil [[nil [nil [nil [nil [nil [nil (0) nil nil] nil 115] nil 97] nil 105] nil 108] [[nil [nil [nil [nil [nil [nil (0) nil nil] nil 116] nil 115] nil 110] nil 111] nil 99] [nil [nil [nil [nil [nil [nil [nil (0) nil nil] nil 121] nil 101] nil 107] nil 45] nil 101] nil 110] [nil [nil [nil (0) nil nil] nil 110] nil 117] 105] 97] [nil [nil [nil (0) nil nil] nil 114] nil 97] nil 118] nil 102] nil 101] [[[[nil [nil [nil [nil [nil [nil [nil [nil (0) nil nil] nil 108] nil 108] nil 97] nil 99] nil 110] nil 117] [nil [nil [nil [nil [nil [nil [nil [nil [nil [nil [nil [nil [nil [nil [nil (0) nil nil] nil 121] nil 101] nil 107] nil 45] nil 116] nil 101] nil 115] nil 45] nil 108] nil 97] nil 98] nil 111] nil 108] nil 103] 102] [[nil [nil [nil [nil [nil [nil (0) nil nil] nil 101] nil 114] nil 111] nil 110] nil 103] [nil [nil [nil [nil [nil [nil [nil [nil [nil [nil (1) nil nil] nil 101] nil 118] nil 105] nil 116] nil 99] nil 97] nil 114] nil 101] nil 116] nil 110] nil 105] [nil [nil [nil (1) nil nil] nil 116] [nil [nil [nil [nil [nil [nil [nil [nil [nil [nil [nil [nil [nil (0) nil nil] nil 121] nil 101] nil 107] nil 45] nil 116] nil 101] nil 115] nil 45] nil 108] nil 97] nil 99] nil 111] 101] [nil [nil [nil [nil [nil (0) nil nil] nil 97] nil 116] nil 101] nil 109] 108] [nil [nil [nil (1) nil nil] nil 108] nil 105] [[nil [nil [nil [nil [nil [nil [nil [nil (0) nil nil] nil 101] nil 114] nil 105] nil 117] nil 113] nil 101] nil 114] [nil [nil [nil [nil (0) nil nil] nil 113] nil 116] nil 101] nil 115] 110] 100] nil t] (lambda (a b) (cond ((and (null a) (null b)) 0) ((null a) -1) ((null b) 1) (t (- a b)))) (lambda (new cell) (if (null cell) (dictree--wrap-data (funcall (lambda (weight data) (cond ((not (or weight data)) 0) ((null weight) (1+ data)) ((null data) weight) (t (+ weight data)))) new nil)) (dictree--set-data cell (funcall (lambda (weight data) (cond ((not (or weight data)) 0) ((null weight) (1+ data)) ((null data) weight) (t (+ weight data)))) new (dictree--get-data cell))) cell)) lambda (a b) (funcall (lambda (a b) (if (= (cdr a) (cdr b)) (if (= (length (car a)) (length (car b))) (string< (car a) (car b)) (< (length (car a)) (length (car b)))) (> (cdr a) (cdr b)))) (cons (car a) (dictree--get-data (cdr a))) (cons (car b) (dictree--get-data (cdr b))))) (lambda (new cell) (if (null cell) (dictree--wrap-data (funcall (lambda (weight data) (cond ((not (or weight data)) 0) ((null weight) (1+ data)) ((null data) weight) (t (+ weight data)))) new nil)) (dictree--set-data cell (funcall (lambda (weight data) (cond ((not (or weight data)) 0) ((null weight) (1+ data)) ((null data) weight) (t (+ weight data)))) new (dictree--get-data cell))) cell)) (lambda (a b) (funcall (lambda (a b) (if (= (cdr a) (cdr b)) (if (= (length (car a)) (length (car b))) (string< (car a) (car b)) (< (length (car a)) (length (car b)))) (> (cdr a) (cdr b)))) (cons (car a) (dictree--get-data (cdr a))) (cons (car b) (dictree--get-data (cdr b))))) nil nil nil nil (("d" (#("defun" 0 1 (fontified t auto-composed t) 1 2 (fontified t auto-composed t) 2 3 (fontified t auto-composed t) 3 4 (fontified t auto-composed t) 4 5 (fontified t auto-composed t)) "defvar" "defalias" #("defconst" 0 1 (fontified t auto-composed t face font-lock-keyword-face) 1 2 (fontified t auto-composed t face font-lock-keyword-face) 2 3 (fontified t auto-composed t face font-lock-keyword-face) 3 4 (fontified t auto-composed t face font-lock-keyword-face) 4 5 (fontified t auto-composed t face font-lock-keyword-face) 5 6 (fontified t auto-composed t face font-lock-keyword-face) 6 7 (fontified t auto-composed t face font-lock-keyword-face) 7 8 (fontified t auto-composed t face font-lock-keyword-face)) "define-key") . 10)) 0.1))
(let ((ordered-hash (make-hash-table :test 'equal))
      (tstree (dictree--tstree dict-elisp)))
  (mapc
   (lambda (entry)
     (puthash
      (car entry)
      (dictree--cache-create
       (mapcar
        (lambda (key)
          (cons key (tstree-member tstree key)))
        (dictree--cache-completions (cdr entry)))
       (dictree--cache-maxnum (cdr entry)))
      ordered-hash))
   (dictree--ordered-hash dict-elisp))
  (dictree--set-ordered-hash dict-elisp ordered-hash))
(dictree--set-filename dict-elisp (locate-library "dict-elisp"))
(unless (memq dict-elisp dictree-loaded-list) (push dict-elisp dictree-loaded-list))
